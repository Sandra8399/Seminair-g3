require(remotes)
install_version("tidytree", version = "0.4.2")
BiocManager::install("ggtree", force=T, type = 'source')
sessionInfo()
# Load necessary libraries
library(edgeR)          # For RNA-seq differential expression analysis and count transformations
library(DESeq2)         # For differential expression analysis using DESeq2
library(org.Hs.eg.db)   # Annotation package for human genome
library(openxlsx)       # For exporting results to Excel files
library(enrichplot)
# Import RNA-seq counts data
counts <- read.table(file = "E-MTAB-2523.counts.txt",
header = TRUE,       # First row contains column headers
as.is = TRUE,        # Keep strings as characters, not factors
sep = "\t",          # File is tab-separated
row.names = 1)       # Use the first column as row names (gene IDs)
# Import metadata/sample information
samples <- read.table(file = "E-MTAB-2523_sample table.txt",
header = TRUE,       # First row contains column headers
as.is = TRUE,        # Keep strings as characters
sep = "\t",          # File is tab-separated
row.names = 1)       # Use the first column as row names (sample IDs)
# Filter lowly expressed genes based on log2 counts per million (CPM)
meanLog2CPM <- rowMeans(log2(cpm(counts) + 1))  # Compute mean log2 CPM for each gene
counts <- counts[meanLog2CPM > 1, ]             # Retain only genes with mean log2 CPM > 1
# Extract metadata for the experimental design
individual <- samples$individual   # Factor indicating individual/sample ID
disease <- samples$disease         # Factor indicating disease condition (e.g., normal vs carcinoma)
# Create DESeq2 dataset object for differential expression analysis
dds <- DESeqDataSetFromMatrix(
countData = counts,              # Filtered RNA-seq count data
design = ~ individual + disease, # Model: account for individual and disease condition
colData = data.frame(
individual = individual,
disease = disease))
# Perform differential expression analysis
dds <- DESeq(dds)       # Run the DESeq2 pipeline to normalize and analyze the data
res <- results(dds)     # Extract results (log2 fold change, p-values, etc.)
# Filter significant differentially expressed genes (DEGs)
Filtered <- res[which(res$padj < 0.05 & abs(res$log2FoldChange) > 1), ]  # Apply FDR < 0.05 and |log2FC| > 1
head(Filtered)          # Display the first few rows of significant DEGs
dim(Filtered)           # Display the number of significant genes
# Check current environment objects
ls()                    # List all objects in the environment
# Extract significant gene SYMBOLs
significant_genes <- rownames(Filtered)  # Extract row names (gene IDs) of significant DEGs
print(significant_genes)                 # Print the gene list to verify
# Load clusterProfiler for enrichment analysis
library(clusterProfiler)
# Convert gene IDs from SYMBOL to ENTREZID for enrichment analysis
gene_conversion <- bitr(significant_genes,
fromType = "SYMBOL",    # Input gene ID type
toType = "ENTREZID",    # Desired gene ID type
OrgDb = org.Hs.eg.db)   # Database for human genome annotations
entrez_ids <- gene_conversion$ENTREZID          # Extract ENTREZ gene IDs
# Perform GO (Gene Ontology) enrichment analysis for Biological Processes (BP)
ego <- enrichGO(gene = entrez_ids,         # ENTREZ gene IDs
OrgDb = org.Hs.eg.db,      # Database for human genome annotations
keyType = "ENTREZID",      # Key type for gene IDs
ont = "BP",                # Focus on Biological Process terms
pAdjustMethod = "BH",      # Benjamini-Hochberg correction for multiple testing
pvalueCutoff = 0.05)       # Adjusted p-value cutoff for significance
# Perform KEGG pathway enrichment analysis
ekegg <- enrichKEGG(gene = entrez_ids,     # ENTREZ gene IDs
organism = "hsa",      # KEGG organism code for Homo sapiens
pvalueCutoff = 0.05)   # Adjusted p-value cutoff for significance
# Export enrichment results to an Excel file
library(openxlsx)              # Load openxlsx library for Excel output
wb <- createWorkbook()         # Create a new Excel workbook
# Write GO enrichment results to a worksheet
addWorksheet(wb, "GO_Enrichment")
writeData(wb, "GO_Enrichment", ego@result)
# Write KEGG enrichment results to a worksheet
addWorksheet(wb, "KEGG_Enrichment")
writeData(wb, "KEGG_Enrichment", ekegg@result)
# Save the workbook as 'Enrichment_Results.xlsx'
saveWorkbook(wb, "Enrichment_Results.xlsx", overwrite = TRUE)
# Visualize the top 10 GO and KEGG enrichment results using dot plots
dotplot(ego, showCategory = 10, title = "Top 10 GO Enrichment Terms")      # Top GO terms
dotplot(ekegg, showCategory = 10, title = "Top 10 KEGG Pathways")          # Top KEGG pathways
# Calculate pairwise term similarity for GO terms
ego_termsim <- pairwise_termsim(ego)  # Compute similarity between GO terms based on shared genes
# Generate a treeplot to visualize the similarity between GO terms
treeplot(ego_termsim, showCategory = 10, title = "GO Term Similarity Tree")
sessionInfo()
str(ego_termsim)
summary(ego_termsim)
?treeplot
# Load necessary libraries
library(edgeR)          # For RNA-seq differential expression analysis and count transformations
library(DESeq2)         # For differential expression analysis using DESeq2
library(org.Hs.eg.db)   # Annotation package for human genome
library(openxlsx)       # For exporting results to Excel files
library(enrichplot)
# Import RNA-seq counts data
counts <- read.table(file = "E-MTAB-2523.counts.txt",
header = TRUE,       # First row contains column headers
as.is = TRUE,        # Keep strings as characters, not factors
sep = "\t",          # File is tab-separated
row.names = 1)       # Use the first column as row names (gene IDs)
# Import metadata/sample information
samples <- read.table(file = "E-MTAB-2523_sample table.txt",
header = TRUE,       # First row contains column headers
as.is = TRUE,        # Keep strings as characters
sep = "\t",          # File is tab-separated
row.names = 1)       # Use the first column as row names (sample IDs)
# Filter lowly expressed genes based on log2 counts per million (CPM)
meanLog2CPM <- rowMeans(log2(cpm(counts) + 1))  # Compute mean log2 CPM for each gene
counts <- counts[meanLog2CPM > 1, ]             # Retain only genes with mean log2 CPM > 1
# Extract metadata for the experimental design
individual <- samples$individual   # Factor indicating individual/sample ID
disease <- samples$disease         # Factor indicating disease condition (e.g., normal vs carcinoma)
# Create DESeq2 dataset object for differential expression analysis
dds <- DESeqDataSetFromMatrix(
countData = counts,              # Filtered RNA-seq count data
design = ~ individual + disease, # Model: account for individual and disease condition
colData = data.frame(
individual = individual,
disease = disease))
# Perform differential expression analysis
dds <- DESeq(dds)       # Run the DESeq2 pipeline to normalize and analyze the data
res <- results(dds)     # Extract results (log2 fold change, p-values, etc.)
# Filter significant differentially expressed genes (DEGs)
Filtered <- res[which(res$padj < 0.05 & abs(res$log2FoldChange) > 1), ]  # Apply FDR < 0.05 and |log2FC| > 1
head(Filtered)          # Display the first few rows of significant DEGs
dim(Filtered)           # Display the number of significant genes
# Check current environment objects
ls()                    # List all objects in the environment
# Extract significant gene SYMBOLs
significant_genes <- rownames(Filtered)  # Extract row names (gene IDs) of significant DEGs
print(significant_genes)                 # Print the gene list to verify
# Load clusterProfiler for enrichment analysis
library(clusterProfiler)
# Convert gene IDs from SYMBOL to ENTREZID for enrichment analysis
gene_conversion <- bitr(significant_genes,
fromType = "SYMBOL",    # Input gene ID type
toType = "ENTREZID",    # Desired gene ID type
OrgDb = org.Hs.eg.db)   # Database for human genome annotations
entrez_ids <- gene_conversion$ENTREZID          # Extract ENTREZ gene IDs
# Perform GO (Gene Ontology) enrichment analysis for Biological Processes (BP)
ego <- enrichGO(gene = entrez_ids,         # ENTREZ gene IDs
OrgDb = org.Hs.eg.db,      # Database for human genome annotations
keyType = "ENTREZID",      # Key type for gene IDs
ont = "BP",                # Focus on Biological Process terms
pAdjustMethod = "BH",      # Benjamini-Hochberg correction for multiple testing
pvalueCutoff = 0.05)       # Adjusted p-value cutoff for significance
# Perform KEGG pathway enrichment analysis
ekegg <- enrichKEGG(gene = entrez_ids,     # ENTREZ gene IDs
organism = "hsa",      # KEGG organism code for Homo sapiens
pvalueCutoff = 0.05)   # Adjusted p-value cutoff for significance
# Export enrichment results to an Excel file
library(openxlsx)              # Load openxlsx library for Excel output
wb <- createWorkbook()         # Create a new Excel workbook
# Write GO enrichment results to a worksheet
addWorksheet(wb, "GO_Enrichment")
writeData(wb, "GO_Enrichment", ego@result)
# Write KEGG enrichment results to a worksheet
addWorksheet(wb, "KEGG_Enrichment")
writeData(wb, "KEGG_Enrichment", ekegg@result)
# Save the workbook as 'Enrichment_Results.xlsx'
saveWorkbook(wb, "Enrichment_Results.xlsx", overwrite = TRUE)
# Visualize the top 10 GO and KEGG enrichment results using dot plots
dotplot(ego, showCategory = 10, title = "Top 10 GO Enrichment Terms")      # Top GO terms
dotplot(ekegg, showCategory = 10, title = "Top 10 KEGG Pathways")          # Top KEGG pathways
# Calculate pairwise term similarity for GO terms
ego_termsim <- pairwise_termsim(ego)  # Compute similarity between GO terms based on shared genes
# Generate a treeplot to visualize the similarity between GO terms
treeplot.enrichResult(ego_termsim, showCategory = 10, title = "GO Term Similarity Tree")
# Load necessary libraries
library(edgeR)          # For RNA-seq differential expression analysis and count transformations
library(DESeq2)         # For differential expression analysis using DESeq2
library(org.Hs.eg.db)   # Annotation package for human genome
library(openxlsx)       # For exporting results to Excel files
library(enrichplot)
# Import RNA-seq counts data
counts <- read.table(file = "E-MTAB-2523.counts.txt",
header = TRUE,       # First row contains column headers
as.is = TRUE,        # Keep strings as characters, not factors
sep = "\t",          # File is tab-separated
row.names = 1)       # Use the first column as row names (gene IDs)
# Import metadata/sample information
samples <- read.table(file = "E-MTAB-2523_sample table.txt",
header = TRUE,       # First row contains column headers
as.is = TRUE,        # Keep strings as characters
sep = "\t",          # File is tab-separated
row.names = 1)       # Use the first column as row names (sample IDs)
# Filter lowly expressed genes based on log2 counts per million (CPM)
meanLog2CPM <- rowMeans(log2(cpm(counts) + 1))  # Compute mean log2 CPM for each gene
counts <- counts[meanLog2CPM > 1, ]             # Retain only genes with mean log2 CPM > 1
# Extract metadata for the experimental design
individual <- samples$individual   # Factor indicating individual/sample ID
disease <- samples$disease         # Factor indicating disease condition (e.g., normal vs carcinoma)
# Create DESeq2 dataset object for differential expression analysis
dds <- DESeqDataSetFromMatrix(
countData = counts,              # Filtered RNA-seq count data
design = ~ individual + disease, # Model: account for individual and disease condition
colData = data.frame(
individual = individual,
disease = disease))
# Perform differential expression analysis
dds <- DESeq(dds)       # Run the DESeq2 pipeline to normalize and analyze the data
res <- results(dds)     # Extract results (log2 fold change, p-values, etc.)
# Filter significant differentially expressed genes (DEGs)
Filtered <- res[which(res$padj < 0.05 & abs(res$log2FoldChange) > 1), ]  # Apply FDR < 0.05 and |log2FC| > 1
head(Filtered)          # Display the first few rows of significant DEGs
dim(Filtered)           # Display the number of significant genes
# Check current environment objects
ls()                    # List all objects in the environment
# Extract significant gene SYMBOLs
significant_genes <- rownames(Filtered)  # Extract row names (gene IDs) of significant DEGs
print(significant_genes)                 # Print the gene list to verify
# Load clusterProfiler for enrichment analysis
library(clusterProfiler)
# Convert gene IDs from SYMBOL to ENTREZID for enrichment analysis
gene_conversion <- bitr(significant_genes,
fromType = "SYMBOL",    # Input gene ID type
toType = "ENTREZID",    # Desired gene ID type
OrgDb = org.Hs.eg.db)   # Database for human genome annotations
entrez_ids <- gene_conversion$ENTREZID          # Extract ENTREZ gene IDs
# Perform GO (Gene Ontology) enrichment analysis for Biological Processes (BP)
ego <- enrichGO(gene = entrez_ids,         # ENTREZ gene IDs
OrgDb = org.Hs.eg.db,      # Database for human genome annotations
keyType = "ENTREZID",      # Key type for gene IDs
ont = "BP",                # Focus on Biological Process terms
pAdjustMethod = "BH",      # Benjamini-Hochberg correction for multiple testing
pvalueCutoff = 0.05)       # Adjusted p-value cutoff for significance
# Perform KEGG pathway enrichment analysis
ekegg <- enrichKEGG(gene = entrez_ids,     # ENTREZ gene IDs
organism = "hsa",      # KEGG organism code for Homo sapiens
pvalueCutoff = 0.05)   # Adjusted p-value cutoff for significance
# Export enrichment results to an Excel file
library(openxlsx)              # Load openxlsx library for Excel output
wb <- createWorkbook()         # Create a new Excel workbook
# Write GO enrichment results to a worksheet
addWorksheet(wb, "GO_Enrichment")
writeData(wb, "GO_Enrichment", ego@result)
# Write KEGG enrichment results to a worksheet
addWorksheet(wb, "KEGG_Enrichment")
writeData(wb, "KEGG_Enrichment", ekegg@result)
# Save the workbook as 'Enrichment_Results.xlsx'
saveWorkbook(wb, "Enrichment_Results.xlsx", overwrite = TRUE)
# Visualize the top 10 GO and KEGG enrichment results using dot plots
dotplot(ego, showCategory = 10, title = "Top 10 GO Enrichment Terms")      # Top GO terms
dotplot(ekegg, showCategory = 10, title = "Top 10 KEGG Pathways")          # Top KEGG pathways
# Calculate pairwise term similarity for GO terms
ego_termsim <- pairwise_termsim(ego)  # Compute similarity between GO terms based on shared genes
# Generate a treeplot to visualize the similarity between GO terms
treeplot.compareClusterResult(ego_termsim, showCategory = 10, title = "GO Term Similarity Tree")
# Load necessary libraries
library(edgeR)          # For RNA-seq differential expression analysis and count transformations
library(DESeq2)         # For differential expression analysis using DESeq2
library(org.Hs.eg.db)   # Annotation package for human genome
library(openxlsx)       # For exporting results to Excel files
library(enrichplot)
# Import RNA-seq counts data
counts <- read.table(file = "E-MTAB-2523.counts.txt",
header = TRUE,       # First row contains column headers
as.is = TRUE,        # Keep strings as characters, not factors
sep = "\t",          # File is tab-separated
row.names = 1)       # Use the first column as row names (gene IDs)
# Import metadata/sample information
samples <- read.table(file = "E-MTAB-2523_sample table.txt",
header = TRUE,       # First row contains column headers
as.is = TRUE,        # Keep strings as characters
sep = "\t",          # File is tab-separated
row.names = 1)       # Use the first column as row names (sample IDs)
# Filter lowly expressed genes based on log2 counts per million (CPM)
meanLog2CPM <- rowMeans(log2(cpm(counts) + 1))  # Compute mean log2 CPM for each gene
counts <- counts[meanLog2CPM > 1, ]             # Retain only genes with mean log2 CPM > 1
# Extract metadata for the experimental design
individual <- samples$individual   # Factor indicating individual/sample ID
disease <- samples$disease         # Factor indicating disease condition (e.g., normal vs carcinoma)
# Create DESeq2 dataset object for differential expression analysis
dds <- DESeqDataSetFromMatrix(
countData = counts,              # Filtered RNA-seq count data
design = ~ individual + disease, # Model: account for individual and disease condition
colData = data.frame(
individual = individual,
disease = disease))
# Perform differential expression analysis
dds <- DESeq(dds)       # Run the DESeq2 pipeline to normalize and analyze the data
res <- results(dds)     # Extract results (log2 fold change, p-values, etc.)
# Filter significant differentially expressed genes (DEGs)
Filtered <- res[which(res$padj < 0.05 & abs(res$log2FoldChange) > 1), ]  # Apply FDR < 0.05 and |log2FC| > 1
head(Filtered)          # Display the first few rows of significant DEGs
dim(Filtered)           # Display the number of significant genes
# Check current environment objects
ls()                    # List all objects in the environment
# Extract significant gene SYMBOLs
significant_genes <- rownames(Filtered)  # Extract row names (gene IDs) of significant DEGs
print(significant_genes)                 # Print the gene list to verify
# Load clusterProfiler for enrichment analysis
library(clusterProfiler)
# Convert gene IDs from SYMBOL to ENTREZID for enrichment analysis
gene_conversion <- bitr(significant_genes,
fromType = "SYMBOL",    # Input gene ID type
toType = "ENTREZID",    # Desired gene ID type
OrgDb = org.Hs.eg.db)   # Database for human genome annotations
entrez_ids <- gene_conversion$ENTREZID          # Extract ENTREZ gene IDs
# Perform GO (Gene Ontology) enrichment analysis for Biological Processes (BP)
ego <- enrichGO(gene = entrez_ids,         # ENTREZ gene IDs
OrgDb = org.Hs.eg.db,      # Database for human genome annotations
keyType = "ENTREZID",      # Key type for gene IDs
ont = "BP",                # Focus on Biological Process terms
pAdjustMethod = "BH",      # Benjamini-Hochberg correction for multiple testing
pvalueCutoff = 0.05)       # Adjusted p-value cutoff for significance
# Perform KEGG pathway enrichment analysis
ekegg <- enrichKEGG(gene = entrez_ids,     # ENTREZ gene IDs
organism = "hsa",      # KEGG organism code for Homo sapiens
pvalueCutoff = 0.05)   # Adjusted p-value cutoff for significance
# Export enrichment results to an Excel file
library(openxlsx)              # Load openxlsx library for Excel output
wb <- createWorkbook()         # Create a new Excel workbook
# Write GO enrichment results to a worksheet
addWorksheet(wb, "GO_Enrichment")
writeData(wb, "GO_Enrichment", ego@result)
# Write KEGG enrichment results to a worksheet
addWorksheet(wb, "KEGG_Enrichment")
writeData(wb, "KEGG_Enrichment", ekegg@result)
# Save the workbook as 'Enrichment_Results.xlsx'
saveWorkbook(wb, "Enrichment_Results.xlsx", overwrite = TRUE)
# Visualize the top 10 GO and KEGG enrichment results using dot plots
dotplot(ego, showCategory = 10, title = "Top 10 GO Enrichment Terms")      # Top GO terms
dotplot(ekegg, showCategory = 10, title = "Top 10 KEGG Pathways")          # Top KEGG pathways
# Calculate pairwise term similarity for GO terms
ego_termsim <- pairwise_termsim(ego)  # Compute similarity between GO terms based on shared genes
# Generate a treeplot to visualize the similarity between GO terms
treeplot(ego_termsim, showCategory = 10, title = "GO Term Similarity Tree")
ego_termsim$edge
library(phangorn)
install.packages("phangorn")
library(phangorn)
tree <- checkValidPhylo(ego_termsim)
View(ego_termsim)
# Load necessary libraries
library(edgeR)          # For RNA-seq differential expression analysis and count transformations
library(DESeq2)         # For differential expression analysis using DESeq2
library(org.Hs.eg.db)   # Annotation package for human genome
library(openxlsx)       # For exporting results to Excel files
library(enrichplot)
# Import RNA-seq counts data
counts <- read.table(file = "E-MTAB-2523.counts.txt",
header = TRUE,       # First row contains column headers
as.is = TRUE,        # Keep strings as characters, not factors
sep = "\t",          # File is tab-separated
row.names = 1)       # Use the first column as row names (gene IDs)
# Import metadata/sample information
samples <- read.table(file = "E-MTAB-2523_sample table.txt",
header = TRUE,       # First row contains column headers
as.is = TRUE,        # Keep strings as characters
sep = "\t",          # File is tab-separated
row.names = 1)       # Use the first column as row names (sample IDs)
# Filter lowly expressed genes based on log2 counts per million (CPM)
meanLog2CPM <- rowMeans(log2(cpm(counts) + 1))  # Compute mean log2 CPM for each gene
counts <- counts[meanLog2CPM > 1, ]             # Retain only genes with mean log2 CPM > 1
# Extract metadata for the experimental design
individual <- samples$individual   # Factor indicating individual/sample ID
disease <- samples$disease         # Factor indicating disease condition (e.g., normal vs carcinoma)
# Create DESeq2 dataset object for differential expression analysis
dds <- DESeqDataSetFromMatrix(
countData = counts,              # Filtered RNA-seq count data
design = ~ individual + disease, # Model: account for individual and disease condition
colData = data.frame(
individual = individual,
disease = disease))
# Perform differential expression analysis
dds <- DESeq(dds)       # Run the DESeq2 pipeline to normalize and analyze the data
res <- results(dds)     # Extract results (log2 fold change, p-values, etc.)
# Filter significant differentially expressed genes (DEGs)
Filtered <- res[which(res$padj < 0.05 & abs(res$log2FoldChange) > 1), ]  # Apply FDR < 0.05 and |log2FC| > 1
head(Filtered)          # Display the first few rows of significant DEGs
dim(Filtered)           # Display the number of significant genes
# Check current environment objects
ls()                    # List all objects in the environment
# Extract significant gene SYMBOLs
significant_genes <- rownames(Filtered)  # Extract row names (gene IDs) of significant DEGs
print(significant_genes)                 # Print the gene list to verify
# Load clusterProfiler for enrichment analysis
library(clusterProfiler)
# Convert gene IDs from SYMBOL to ENTREZID for enrichment analysis
gene_conversion <- bitr(significant_genes,
fromType = "SYMBOL",    # Input gene ID type
toType = "ENTREZID",    # Desired gene ID type
OrgDb = org.Hs.eg.db)   # Database for human genome annotations
entrez_ids <- gene_conversion$ENTREZID          # Extract ENTREZ gene IDs
# Perform GO (Gene Ontology) enrichment analysis for Biological Processes (BP)
ego <- enrichGO(gene = entrez_ids,         # ENTREZ gene IDs
OrgDb = org.Hs.eg.db,      # Database for human genome annotations
keyType = "ENTREZID",      # Key type for gene IDs
ont = "BP",                # Focus on Biological Process terms
pAdjustMethod = "BH",      # Benjamini-Hochberg correction for multiple testing
pvalueCutoff = 0.05)       # Adjusted p-value cutoff for significance
# Perform KEGG pathway enrichment analysis
ekegg <- enrichKEGG(gene = entrez_ids,     # ENTREZ gene IDs
organism = "hsa",      # KEGG organism code for Homo sapiens
pvalueCutoff = 0.05)   # Adjusted p-value cutoff for significance
# Export enrichment results to an Excel file
library(openxlsx)              # Load openxlsx library for Excel output
wb <- createWorkbook()         # Create a new Excel workbook
# Write GO enrichment results to a worksheet
addWorksheet(wb, "GO_Enrichment")
writeData(wb, "GO_Enrichment", ego@result)
# Write KEGG enrichment results to a worksheet
addWorksheet(wb, "KEGG_Enrichment")
writeData(wb, "KEGG_Enrichment", ekegg@result)
# Save the workbook as 'Enrichment_Results.xlsx'
saveWorkbook(wb, "Enrichment_Results.xlsx", overwrite = TRUE)
# Visualize the top 10 GO and KEGG enrichment results using dot plots
dotplot(ego, showCategory = 10, title = "Top 10 GO Enrichment Terms")      # Top GO terms
dotplot(ekegg, showCategory = 10, title = "Top 10 KEGG Pathways")          # Top KEGG pathways
# Calculate pairwise term similarity for GO terms
ego_termsim <- pairwise_termsim(ego)  # Compute similarity between GO terms based on shared genes
# Generate a treeplot to visualize the similarity between GO terms
treeplot(ego_termsim)
counts <- read.table(file = "E-MTAB-2523.counts.txt",
header = TRUE,
as.is = TRUE,
sep = "\t",
row.names = 1)
samples <- read.table(file = "E-MTAB-2523_sample table.txt",
header = TRUE,
as.is = TRUE,
sep = "\t",
row.names = 1)
#Data filtering, based on mean log2 cmp
